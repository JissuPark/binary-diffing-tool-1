# Hash file들을 Qnique한 하나의 파일로 합치는 코드 #
# Make Malware hash Set #
import os
import json
import timeit
from pprint import pprint

def read_json(PATH):
    with open(PATH, "r") as json_data:
        data = json.load(json_data)
    return data

def get_unique_hash(BASE_PATH, file_list, __malName):
    print(f'[Debug] Makeing Qnique Hash Set - {__malName}')
    join_dic = dict()
    real_join_dic = dict()
    mal_dic = dict()

    for _file in file_list:
        print(_file)
        temp_dic = read_json(BASE_PATH + '\\'+ __malName +'\\' + _file)
        for j in temp_dic:
            if j in join_dic:
                for r_const, r_etc_value in join_dic[j].items():
                    for n_const, n_etc_value in temp_dic[j].items():
                        for malName, _hash in n_etc_value.items():
                            join_hash = list()
                            test = [fhash for x in real_join_dic[j] for y in real_join_dic[j][x] for fhash in real_join_dic[j][x][y]]
                            for q in test:
                                join_hash.append(q)
                            join_hash.append(temp_dic[j][n_const][malName])
                            if n_const and r_const:
                                join_const = str(r_const) +" "+ str(n_const)
                                real_join_dic.update({j:{join_const:{malName:join_hash}}})
                            elif n_const and not r_const:
                                join_const = str(n_const)
                                real_join_dic.update({j:{join_const:{malName:join_hash}}})    
                            del join_hash                    
            else:
                temp_list = list()
                for const, _last in temp_dic[j].items():
                    join_dic.update({j:temp_dic[j]})
                    temp_list.append(_last[__malName])
                    real_join_dic.update({j:{const:{__malName:temp_list}}})
                    del temp_list

    try:
        if not(os.path.isdir('C:\\Users\\E-1\\Desktop\\result\\'+__malName)):
            os.makedirs(os.path.join('C:\\Users\\E-1\\Desktop\\result\\'+__malName))
    except OSError as e:
        if e.errno != errno.EEXIST:
            print("Failed to create directory!!!!!")
            raise

    with open('C:\\Users\\E-1\\Desktop\\result\\'+__malName+'\\'+__malName+'.hashSet', 'w', encoding='utf-8') as make_file:
        json.dump(real_join_dic, make_file, indent="\t")



if __name__ == "__main__":

    s = timeit.default_timer()

    BASE_PATH = r"C:\Users\E-1\Desktop\tagging"

    # Get dir list
    dir_list = list()
    for dir in os.listdir(BASE_PATH):
        dir_list.append(dir)

    for dir in dir_list:
        get_unique_hash(BASE_PATH, os.listdir(BASE_PATH + '\\' + dir), dir)


    print(f"[INFO] running time : {timeit.default_timer() - s}")
